/*
 * This source file was generated by the Gradle 'init' task
 */
package org.brayancaro;

import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.File;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import com.googlecode.lanterna.TerminalSize;
import com.googlecode.lanterna.input.KeyStroke;
import com.googlecode.lanterna.input.KeyType;
import com.googlecode.lanterna.screen.TerminalScreen;
import com.googlecode.lanterna.terminal.Terminal;

class MenuTest {
    private Menu menu;

    private Terminal terminal;

    @BeforeEach
    public void init() throws IOException {
        new File(Menu.SAVED_FILE_PATH).delete();

        terminal = Mockito.mock(Terminal.class);

        Mockito.when(terminal.getTerminalSize()).thenReturn(TerminalSize.ONE);

        var screen = new TerminalScreen(terminal);
        menu = new Menu()
                .random(new Random(120))
                .screen(screen);
    }

    @Test
    void playerCanWinAGame() throws Exception {
        Mockito.when(terminal.pollInput()).thenReturn(
                // mock user keys: press first option and then submit
                new KeyStroke(KeyType.Enter),
                new KeyStroke(KeyType.Tab),
                new KeyStroke(KeyType.Enter),
                null, // required to indicate no more input

                // exit game
                new KeyStroke(KeyType.ArrowDown), // focus 2nd option
                new KeyStroke(KeyType.ArrowDown), // focus 3rd option
                new KeyStroke(KeyType.ArrowDown), // focus 4rd option
                new KeyStroke(KeyType.Enter), // select
                new KeyStroke(KeyType.Tab), // submit
                new KeyStroke(KeyType.Enter),
                null // required to indicate no more input
        );

        menu.setScanner(new Scanner("""
                8 # rows
                8 # columns
                1 # bombs
                1 1
                v
                n
                """))
                .play();

        assertTrue(true);
    }

    @Test
    void playerCanWinAndSaveGame() throws Exception {
        Mockito.when(terminal.pollInput()).thenReturn(
                // mock user keys: press first option and then submit

                new KeyStroke(KeyType.Enter),
                new KeyStroke(KeyType.Tab),
                new KeyStroke(KeyType.Enter),
                null, // required to indicate no more input

                // view stats
                new KeyStroke(KeyType.ArrowDown), // focus 2nd option
                new KeyStroke(KeyType.Enter), // select
                new KeyStroke(KeyType.Tab), // submit
                new KeyStroke(KeyType.Enter),
                null,

                // view stats
                new KeyStroke(KeyType.ArrowDown), // focus 2nd option
                new KeyStroke(KeyType.Enter), // select
                new KeyStroke(KeyType.Tab), // submit
                new KeyStroke(KeyType.Enter),
                null,

                // exit game
                new KeyStroke(KeyType.ArrowDown), // focus 2nd option
                new KeyStroke(KeyType.ArrowDown), // focus 3rd option
                new KeyStroke(KeyType.ArrowDown), // focus 4rd option
                new KeyStroke(KeyType.Enter), // select
                new KeyStroke(KeyType.Tab), // submit
                new KeyStroke(KeyType.Enter),
                null // required to indicate no more input
        );

        menu.setScanner(new Scanner("""
                1 # start game
                8 # rows
                8 # columns
                1 # bombs
                1 1
                v
                s
                name-for-saving-game

                2 # see game

                """))
                .play();

        assertTrue(true);
    }

    @Test
    void playerCanQuitGameAfterStarting() throws Exception {
        Mockito.when(terminal.pollInput()).thenReturn(
                // mock user keys: press first option and then submit
                new KeyStroke(KeyType.Enter),
                new KeyStroke(KeyType.Tab),
                new KeyStroke(KeyType.Enter),
                null, // required to indicate no more input

                // exit game
                new KeyStroke(KeyType.ArrowDown), // focus 2nd option
                new KeyStroke(KeyType.ArrowDown), // focus 3rd option
                new KeyStroke(KeyType.ArrowDown), // focus 4rd option
                new KeyStroke(KeyType.Enter), // select
                new KeyStroke(KeyType.Tab), // submit
                new KeyStroke(KeyType.Enter),
                null // required to indicate no more input
        );

        menu.setScanner(new Scanner("""
                8 # rows
                8 # columns
                63 # bombs
                1 1
                v
                """))
                .play();

        assertTrue(true);
    }

    @Test
    void playerCanWinAfterMarkingCell() throws Exception {
        Mockito.when(terminal.pollInput()).thenReturn(
                // mock user keys: press first option and then submit
                new KeyStroke(KeyType.Enter),
                new KeyStroke(KeyType.Tab),
                new KeyStroke(KeyType.Enter),
                null, // required to indicate no more input

                // exit game
                new KeyStroke(KeyType.ArrowDown), // focus 2nd option
                new KeyStroke(KeyType.ArrowDown), // focus 3rd option
                new KeyStroke(KeyType.ArrowDown), // focus 4rd option
                new KeyStroke(KeyType.Enter), // select
                new KeyStroke(KeyType.Tab), // submit
                new KeyStroke(KeyType.Enter),
                null // required to indicate no more input
        );

        menu.setScanner(new Scanner("""
                8 # rows
                8 # columns
                63 # bombs
                6 1
                m
                1 1
                v
                """))
                .play();

        assertTrue(true);
    }

    @Test
    void playerCanWinAfterTogglingCell() throws Exception {
        Mockito.when(terminal.pollInput()).thenReturn(
                // mock user keys: press first option and then submit
                new KeyStroke(KeyType.Enter),
                new KeyStroke(KeyType.Tab),
                new KeyStroke(KeyType.Enter),
                null, // required to indicate no more input

                // exit game
                new KeyStroke(KeyType.ArrowDown), // focus 2nd option
                new KeyStroke(KeyType.ArrowDown), // focus 3rd option
                new KeyStroke(KeyType.ArrowDown), // focus 4rd option
                new KeyStroke(KeyType.Enter), // select
                new KeyStroke(KeyType.Tab), // submit
                new KeyStroke(KeyType.Enter),
                null // required to indicate no more input
        );

        menu.setScanner(new Scanner("""
                8 # rows
                8 # columns
                63 # bombs
                6 1
                m
                6 1
                m
                1 1
                v
                """))
                .play();

        assertTrue(true);
    }

    @Test
    void playerCanEraseData() throws Exception {
        Mockito.when(terminal.pollInput()).thenReturn(
                // mock user keys: press first option and then submit
                new KeyStroke(KeyType.Enter),
                new KeyStroke(KeyType.Tab),
                new KeyStroke(KeyType.Enter),
                null, // required to indicate no more input

                // erase data
                new KeyStroke(KeyType.ArrowDown), // focus 2nd option
                new KeyStroke(KeyType.ArrowDown), // focus 3rd option
                new KeyStroke(KeyType.Enter), // select
                new KeyStroke(KeyType.Tab), // submit
                new KeyStroke(KeyType.Enter),
                null,


                // exit game
                new KeyStroke(KeyType.ArrowDown), // focus 2nd option
                new KeyStroke(KeyType.ArrowDown), // focus 3rd option
                new KeyStroke(KeyType.ArrowDown), // focus 4rd option
                new KeyStroke(KeyType.Enter), // select
                new KeyStroke(KeyType.Tab), // submit
                new KeyStroke(KeyType.Enter),
                null // required to indicate no more input
        );

        menu.setScanner(new Scanner("""
                8 # rows
                8 # columns
                1 # bombs
                1 1
                v
                s
                name-for-saving-game

                2 # see game

                3
                """))
                .play();

        assertTrue(true);
    }

    @Test
    void playerCannotEraseMissingFile() throws Exception {
        Mockito.when(terminal.pollInput()).thenReturn(
                // erase data
                new KeyStroke(KeyType.ArrowDown), // focus 2nd option
                new KeyStroke(KeyType.ArrowDown), // focus 3rd option
                new KeyStroke(KeyType.Enter), // select
                new KeyStroke(KeyType.Tab), // submit
                new KeyStroke(KeyType.Enter),
                null,

                // exit game
                new KeyStroke(KeyType.ArrowDown), // focus 2nd option
                new KeyStroke(KeyType.ArrowDown), // focus 3rd option
                new KeyStroke(KeyType.ArrowDown), // focus 4rd option
                new KeyStroke(KeyType.Enter), // select
                new KeyStroke(KeyType.Tab), // submit
                new KeyStroke(KeyType.Enter),
                null // required to indicate no more input
        );

        menu.setScanner(new Scanner("")).play();

        assertTrue(true);
    }

    @Test
    void playerCannotSeeMissingFile() throws Exception {
        Mockito.when(terminal.pollInput()).thenReturn(
                // view stats
                new KeyStroke(KeyType.ArrowDown), // focus 2nd option
                new KeyStroke(KeyType.Enter), // select
                new KeyStroke(KeyType.Tab), // submit
                new KeyStroke(KeyType.Enter),
                null,

                // exit game
                new KeyStroke(KeyType.ArrowDown), // focus 2nd option
                new KeyStroke(KeyType.ArrowDown), // focus 3rd option
                new KeyStroke(KeyType.ArrowDown), // focus 4rd option
                new KeyStroke(KeyType.Enter), // select
                new KeyStroke(KeyType.Tab), // submit
                new KeyStroke(KeyType.Enter),
                null // required to indicate no more input
        );

        menu.setScanner(new Scanner("""
                    """)).play();

        assertTrue(true);
    }
}
